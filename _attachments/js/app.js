// Generated by CoffeeScript 1.7.1
(function() {
  var D, render,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  D = React.DOM;

  this.DebtsList = React.createClass({
    displayName: "DebtsList",
    render: function() {
      return D.article({
        className: "panel panel-default",
        id: "DebtsList"
      }, D.div({
        className: "panel-heading"
      }, D.h3({
        className: "panel-title"
      }, "Who owes what?")), D.table({
        className: "panel-body table table-stripped table-hover"
      }, D.thead(null, D.tr(null, D.th(null, "From", D.th(null, "To", D.th(null, "Amount"))))), D.tbody(null, this.props.debts.map(function(debt) {
        return D.tr(null, D.td(null, debt.from, D.td(null, debt.to, D.td(null, debt.amount))));
      }))));
    }
  });

  this.ExpensesApp = (function() {
    ExpensesApp.prototype.HOST = '';

    function ExpensesApp(mountOn) {
      if (mountOn == null) {
        mountOn = document.body;
      }
      this.fetchData = __bind(this.fetchData, this);
      this.mountNode = mountOn;
      this.db = $.couch.db('comptes');
      $.couch.urlprefix = this.HOST;
      this.changes = this.db.changes();
      this.changes.onChange(this.fetchData);
      this.fetchData();
    }

    ExpensesApp.prototype.fetchData = function() {
      return this.db.view("expenseslist/ListOfExpenses", {
        success: (function(_this) {
          return function(view) {
            return _this.set('expenses', view.rows.map(function(r) {
              return r.value;
            }));
          };
        })(this),
        error: function(err) {
          return console.error("Unable to fetch expenses", err);
        },
        reduce: false
      });
    };

    ExpensesApp.prototype.set = function(key, value) {
      this[key] = value;
      return this.render();
    };

    ExpensesApp.prototype.render = function() {
      return React.renderComponent(ExpensesAppUI({
        db: this.db,
        users: this.users,
        expenses: this.expenses
      }), this.mountNode);
    };

    return ExpensesApp;

  })();

  document.addEventListener('DOMContentLoaded', (function(_this) {
    return function() {
      _this.app = new _this.ExpensesApp(document.getElementById('expenses'));
      return _this.app.render();
    };
  })(this));

  D = React.DOM;

  this.ExpensesAppUI = React.createClass({
    displayName: "ExpensesAppUI",
    removeDoc: function(doc, n) {
      return this.props.db.removeDoc(doc);
    },
    addExpense: function(doc) {
      return this.props.db.saveDoc(doc);
    },
    expand: function() {
      var expenses;
      expenses = [];
      this.props.expenses.forEach(function(exp) {
        return exp.tos.forEach(function(to) {
          return expenses.push({
            from: exp.from,
            to: to,
            amount: -exp.amount / exp.tos.length
          });
        });
      });
      return expenses;
    },
    simplify: function() {
      return debts.simplify(this.expand());
    },
    allUsers: function() {
      var name, userDebts, users;
      users = [];
      userDebts = debts.totalize(this.expand());
      for (name in userDebts) {
        if (!__hasProp.call(userDebts, name)) continue;
        users.push({
          name: name,
          amount: userDebts[name]
        });
      }
      return users;
    },
    render: function() {
      return D.section({
        id: "app"
      }, D.div({
        className: "col-md-6"
      }, NewExpenseForm({
        addExpense: this.addExpense,
        userNames: this.allUsers().map(function(u) {
          return u.name;
        })
      }), ExpensesList({
        expenses: this.props.expenses,
        removeDoc: this.removeDoc
      })), D.div({
        className: "col-md-6"
      }, DebtsList({
        debts: this.simplify()
      }), UsersList({
        users: this.allUsers()
      })));
    }
  });

  D = React.DOM;

  this.ExpensesList = React.createClass({
    displayName: "ExpensesList",
    mkDeleteFunc: function(doc, n) {
      return (function(_this) {
        return function(evt) {
          if (confirm("Are you sure?")) {
            return _this.props.removeDoc(doc, n);
          }
        };
      })(this);
    },
    render: function() {
      return D.article({
        className: "panel panel-default",
        id: "ExpensesList"
      }, D.div({
        className: "panel-heading"
      }, D.h3({
        className: "panel-title"
      }, "List of all expenses")), D.ul({
        className: "panel-body list-group"
      }, this.props.expenses.filter(function(exp) {
        return exp.repaid !== true;
      }).sort(function(e1, e2) {
        return e1.date < e2.date;
      }).map((function(_this) {
        return function(exp, n) {
          return D.li({
            className: "list-group-item"
          }, D.h4({
            className: "list-group-item-heading"
          }, D.span({
            className: "label label-info"
          }, exp.amount), " ", exp.description), D.div({
            className: "list-group-item-text"
          }, D.p(null, "By ", D.b(null, exp.from), "."), D.p(null, "For " + exp.tos.join(", ") + "."), D.button({
            className: "btn btn-danger",
            onClick: _this.mkDeleteFunc(exp, n)
          }, D.span({
            className: "fa fa-trash-o"
          }), D.span({
            className: "visible-lg-inline"
          }, "Delete"))));
        };
      })(this))));
    }
  });

  D = React.DOM;

  this.NewExpenseForm = React.createClass({
    displayName: "NewExpenseForm",
    handleSubmit: function(evt) {
      var doc;
      evt.preventDefault();
      doc = {
        description: this.val("description").trim(),
        from: this.from.trim(),
        tos: this.to,
        amount: Math.round(parseFloat(this.val("amount")) * 100) / 100,
        date: new Date().toISOString()
      };
      if (!doc.description || !doc.from || !doc.tos.length) {
        return;
      }
      this.props.addExpense(doc);
      this.refs.form.getDOMNode().reset();
      return this.refs.description.getDOMNode().focus();
    },
    val: function(name) {
      if (name in this.refs) {
        return this.refs[name].getDOMNode().value;
      } else {
        return "";
      }
    },
    setFunc: function(name) {
      return (function(_this) {
        return function(val) {
          return _this[name] = val;
        };
      })(this);
    },
    render: render = function() {
      return D.article({
        className: "panel panel-default"
      }, D.div({
        className: "panel-heading"
      }, D.h2({
        className: "panel-title"
      }, "Add a new expense")), D.form({
        onSubmit: this.handleSubmit,
        ref: "form",
        role: "form"
      }, D.label({
        htmlFor: "expense-form-description",
        className: "control-label"
      }, "Description"), D.input({
        id: "expense-form-description",
        className: "form-control",
        placeholder: "What was bought?",
        ref: "description",
        required: true
      }), D.label({
        htmlFor: "expense-form-from",
        className: "control-label"
      }, "Person who made the expense"), UserSelect({
        id: "expenses-form-from",
        onChange: this.setFunc("from"),
        userNames: this.props.userNames,
        multiple: false,
        placeholder: "Who paid?"
      }), D.label({
        htmlFor: "expense-form-for",
        className: "control-label"
      }, "Persons concerned by the expense"), UserSelect({
        onChange: this.setFunc("to"),
        userNames: this.props.userNames,
        multiple: true,
        placeholder: "For who?"
      }), D.label({
        htmlFor: "expense-form-amount",
        className: "control-label"
      }, "Amount of the expense"), D.input({
        id: "expense-form-amount",
        className: "form-control",
        type: "number",
        placeholder: "How much money?",
        ref: "amount",
        required: true,
        min: 0,
        step: 0.01
      }), D.button({
        className: "btn btn-primary"
      }, D.span({
        className: "fa fa-plus"
      }), "Add this expense")));
    }
  });

  D = React.DOM;

  this.UsersList = React.createClass({
    displayName: "UserList",
    render: function() {
      return D.article({
        className: "panel panel-default"
      }, D.div({
        className: "panel-heading"
      }, D.h3({
        className: "panel-title"
      }, "User accounts")), D.table({
        className: "panel-body table table-stripped table-hover"
      }, D.thead(null, D.tr(null, D.th(null, "User", D.th(null, "Total")))), D.tbody(null, this.props.users.map(function(user) {
        return D.tr(null, D.td(null, user.name), D.td(null, user.amount));
      }))));
    }
  });

  D = React.DOM;

  this.UserSelect = React.createClass({
    displayName: "UserSelect",
    attachSelect2: function() {
      $(this.getDOMNode()).select2({
        tags: this.props.userNames,
        tokenSeparators: [","],
        maximumSelectionSize: (this.props.multiple ? -1 : 1),
        formatNoMatches: "",
        width: "100%",
        sortResults: function(results, container, query) {
          if (results.length > 0 && results[0].text === query.term) {
            results.push(results.shift());
          }
          return results;
        }
      }).select2("val", this.props.multiple ? this.props.userNames : []).on("change", this.change);
      return this.change();
    },
    componentDidMount: function() {
      this.attachSelect2();
    },
    componentWillUnmount: function() {
      $(this.getDOMNode()).off("change", this.change);
    },
    componentDidUpdate: function() {
      this.attachSelect2();
    },
    change: function() {
      var val;
      val = $(this.getDOMNode()).select2("val");
      this.props.onChange((this.props.multiple ? val : val[0]));
    },
    render: function() {
      return D.input({
        type: "hidden",
        placeholder: this.props.placeholder,
        defaultValue: (this.props.multiple ? this.props.userNames.join(", ") : "")
      });
    }
  });

}).call(this);
